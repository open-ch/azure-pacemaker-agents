#!/usr/bin/env python
# pylint: disable=invalid-name,too-few-public-methods,missing-docstring
#
# We must disable 'invalid-name' for this, as pacemaker's python interface enforces
# class names to start with OCFParameter_*, which causes pylint to complain:
#  C: 94, 4: Class name "OCFParameter_interface" doesn't conform to PascalCase naming style (invalid-name)

#
# -*- coding: utf-8 -*-
#
# Coding a resource agent in Python makes for some awkward code. Standard RAs
# using shell script heavily rely on return codes. The ocfagent framework
# implements them as exceptions, but of course, there is a difference between
# the "good" OCFSuccess exception and the other "bad" ones.
# In order to correctly interface with the CRM, the OCF* exceptions will call
# SystemExit with the proper return code, so it's generally fine to not catch
# them. The only exception is in fact OCFSuccess and other Python exceptions.

"""
This is Azure EIP ("External IP") resource agent for Pacemaker.
Its task is to update external IP <=> internal IP mappings via Azure API on "start",
and make sure they point to us on "monitor". We don't do anything on "stop".
"""


from __future__ import print_function
import sys
import traceback
import signal
import logging
import time
import socket
import json

# OCF Python framework
from ocfagent.agent import ResourceAgent
import ocfagent.error as ocferr
import ocfagent.parameter as ocfpar

# Azure modules
from azure.identity import ClientSecretCredential, ManagedIdentityCredential, CredentialUnavailableError
from azure.mgmt.network import NetworkManagementClient
from azure.core.exceptions import HttpResponseError, ClientAuthenticationError
from azure.core.pipeline.policies import RetryPolicy


class LogAdapter(logging.LoggerAdapter):
    """Enhances each log message with delta t (from start of the execution)"""
    def process(self, msg, kwargs):
        return '[+%.1f s] %s' % (time.time() - self.extra['ts_start'], msg), kwargs


class AzureEip(ResourceAgent):
    """Azure HA for External IP OCF agent"""
    VERSION = "1.0"
    SHORTDESC = "Azure HA for External IP agent"
    LONGDESC = "Azure HA agent which moves public IP between cluster members during fail-overs"

    ######################################################
    # Parameters. These are taken from pcmk.res.conf.xml #
    ######################################################
    class OCFParameter_managed_identity_id(ocfpar.ResourceStringParameter):
        """
        User-assigned Managed Identity resource ID

        Resource ID of the user-assigned Managed Identity used to perfrom the API calls.
        If present, takes precedence over Service Principal's credentials for authentication.
        Provide an empty string to use a Service Principal instead.
        see issue: https://github.com/CygnusNetworks/pyocfagent/issues/5
        """
        @property
        def required(self):
            return True

    class OCFParameter_application_id(ocfpar.ResourceStringParameter):
        """
        Client_id of the Service Principal.

        The Client ID of the Azure AD Service Principal used to authenticate and
        authorize API calls.
        Only used if no Managed Identity is provided, ignored otherwise.
        """
        @property
        def required(self):
            return True

    class OCFParameter_secret(ocfpar.ResourceStringParameter):
        """
        Secret of the Service Principal.

        A valid secret for the Azure AD Service Principal used to authenticate and
        authorize API calls.
        Only used if no Managed Identity is provided, ignored otherwise.
        """
        @property
        def required(self):
            return True

    class OCFParameter_directory_id(ocfpar.ResourceStringParameter):
        """
        Azure AD Directory ID.

        Directory ID (or tenant ID) of the Azure AD instance to which the Service
        Principal belongs.
        Only used if no Managed Identity is provided, ignored otherwise.
        """
        @property
        def required(self):
            return True

    class OCFParameter_subscription_id(ocfpar.ResourceStringParameter):
        """
        Azure subscription ID

        Subscription ID of the Subscription where the services are hosted.
        """
        @property
        def required(self):
            return True

    class OCFParameter_resource_group(ocfpar.ResourceStringParameter):
        """
        Resource group resources belong to

        Name of the Resource Group where the resources (routing tables, IPs, interfaces)
        are attached to.
        """
        @property
        def required(self):
            return True

    class OCFParameter_interface(ocfpar.ResourceStringParameter):
        """Interface name

        Name of the interface owning the IP Configuration to which the public IP must
        be associated
        """

        @property
        def required(self):
            return True

    class ApiCallTimeoutException(Exception):
        """Exception that is raised if SIGALRM is triggered"""
        pass

    def __init__(self, testmode=False, api_call_timeout=17, debug_logging_enabled=False):
        super(AzureEip, self).__init__(testmode=testmode)

        # Init
        self._api_call_timeout = api_call_timeout
        self._our_address = None
        # an instance of NetworkManagementClient, created in handle_validate_all()
        self._NMC = None
        self._routes = None
        self._ext_ifname = None
        # public ip mapping dict
        self._pub_ip_maps = None

        # LOGGING
        logger = logging.getLogger('azureeip')
        if debug_logging_enabled:
            logger.setLevel(logging.DEBUG)
        else:
            logger.setLevel(logging.INFO)
        logformat = '%(levelname)s: %(name)s[%(process)s]: %(message)s'
        # stdout
        outh = logging.StreamHandler(sys.stdout)
        outh.formatter = logging.Formatter(logformat)
        logger.addHandler(outh)
        # stderr
        errh = logging.StreamHandler(sys.stderr)
        errh.formatter = logging.Formatter(logformat)
        errh.setLevel(logging.ERROR)
        logger.addHandler(errh)

        self.log = LogAdapter(logger, {'ts_start': time.time()})

        # Register the signal function handler
        signal.signal(signal.SIGALRM, self.call_signal_handler)

    def call_signal_handler(self, signum, frame):
        """Handler that kills API call if it was not successful withing given time"""
        message = 'API call not completed within {} seconds'.format(self._api_call_timeout)
        raise self.ApiCallTimeoutException(message)

    ####################################
    # Handlers for the various actions #
    ####################################
    def handle_start(self, timeout=300):
        """
        Op "start" handler which for this resource agent involves:
        - get all "ipConfigurations" for interface "<myhostname>-<iface>" (where <iface>
          comes from "interface" RA parameter). Those objects have id like
           /subscriptions/<SUB>/resourceGroups/<RG>/providers/Microsoft.Network/networkInterfaces/<HOSTNAME>-ethX/ipConfigurations/ip-ethXaY
        - skip those which are not configured to be handled by us (not in _pub_ip_maps)
        - if there are no public IP mapped to our private IP, check where it *is* mapped now
          (likely mapped to the other cluster node), deassociate it from there, associate it
          to us
        """
        self.log.info('START target has been called for rg=%s, interface=%s',
                      self.get_parameter('resource_group'),
                      self.get_parameter('interface'))
        try:
            # Calling validate_all to initialise variables
            validated = False
            while not validated:
                try:
                    self.handle_validate_all()
                except:
                    self.log.warning('validate_all failed. Waiting 5s and trying again')
                    time.sleep(5)
                else:
                    self.log.debug('validate_all returned successfully')
                    validated = True

            peer_iface = None

            # Track if the local object is modified - if so, an API call
            # is required to push the updates to Azure
            peer_disassociate_required = 0
            local_associate_required = 0
            publicIPList = []
            # Get the details about the external interface
            ext_netif = self._NMC.network_interfaces.get(self.get_parameter('resource_group'),
                                                         self._ext_ifname)

            # For each private IP address configured on the external interface
            for ip_cfg in ext_netif.ip_configurations:

                # Check if there is a specific mapping to a public IP address
                # (ie. something like "ip-eth0a2") which we are configured to handle
                # in the json file(s)
                if ip_cfg.name not in self._pub_ip_maps:
                    continue

                self.log.debug('handling ip_cfg %s', ip_cfg.name)
                # get the name of the public IP to be mapped
                # (ie. something like "<hostname>-eth5a2-pub")
                publicIpAddressName = (self._pub_ip_maps[ip_cfg.name].split('/'))[8]

                # check if there is already a public IP mapped to this private IP
                if ip_cfg.public_ip_address is None:
                    # if this is not the case, get the info related to the
                    # public IP to be mapped
                    publicIpAddress = self._NMC.public_ip_addresses.get(self.get_parameter('resource_group'),
                                                                        publicIpAddressName)
                    # check if the public IP is available (not already mapped
                    # to another interface) and free it up if necessary
                    if publicIpAddress.ip_configuration is not None:
                        # The public IP address is not available.
                        # We must first de-associate it from its current
                        # mapping - which should be on the other cluster member
                        remoteIpConfiguration = publicIpAddress.ip_configuration
                        remoteNetworkInterfaceName = (remoteIpConfiguration.id.split('/'))[8]
                        message = ('Public IP address %s is currently associated with %s'
                                   ' - it needs to be deassociated')
                        self.log.info(message, publicIpAddress.name, remoteNetworkInterfaceName)
                        # if not done yet, identify the network interface of the other cluster member
                        if peer_iface is None:
                            peer_iface = self._NMC.network_interfaces.get(self.get_parameter('resource_group'),
                                                                          remoteNetworkInterfaceName)

                        # check if the public IP is currently mapped to the other cluster memeber's interface
                        if remoteNetworkInterfaceName == peer_iface.name:
                            # if so, update the other cluster member's interface to free the public IP
                            for peerIpConfiguration in peer_iface.ip_configurations:
                                if peerIpConfiguration.public_ip_address is None:
                                    continue
                                if peerIpConfiguration.public_ip_address.id == \
                                        self._pub_ip_maps[ip_cfg.name]:
                                    peerIpConfiguration.public_ip_address = None
                                    peer_disassociate_required = 1
                        else:
                            # the various public IP are currently used by different hosts -
                            # this should not be the case. All the IP should be on the other
                            # cluster member.
                            message = ('Unexpected public IP address mapping - Public IP address'
                                       ' {} is used outside of the cluster'.format(publicIpAddress.name))
                            self.log.error(message)
                            raise ocferr.OCFErrGeneric(message)

                    # associate the public IP to the local private IP
                    ip_cfg.public_ip_address = publicIpAddress
                    local_associate_required = 1

                    # add the public IP to the list of moved IP
                    self.log.debug('adding this publicIpAddress to publicIPList')
                    publicIPList.append(publicIpAddress)

                # check if the public IP is already properly mapped to this private IP
                elif ip_cfg.public_ip_address.id == self._pub_ip_maps[ip_cfg.name]:
                    # the private IP address is already mapped to the expected public IP
                    # there is nothing to do for us
                    self.log.info('%s is already mapped to the expected public IP', ip_cfg.name)
                    pass
                else:
                    # the private IP address is mapped to a wrong public IP
                    # We should fail loudly!
                    message = 'The public IP mapped to {} is not the expected one'.format(ip_cfg.name)
                    self.log.error(message)
                    raise ocferr.OCFErrConfigured(message)

            if peer_disassociate_required == 1:
                # some settings of the peer's interface have been modified
                # and the changes need to be applied

                # checking that the interface is ready before asking for a modification
                self.log.debug('Disassociate required. Beginning to wait for remote peer interface %s'
                               ' to be in Succeeded state', peer_iface.name)
                while (self._NMC.network_interfaces.get(self.get_parameter('resource_group'),
                                                        peer_iface.name)).provisioning_state != "Succeeded":
                    self.log.warning('Interface %s not in "Succeeded" state - waiting 10s',
                                     peer_iface.name)
                    time.sleep(10)

                self.log.info('Disassociating IP from remote interface %s', peer_iface.name)
                azLogPoller = (
                        self._NMC
                        .network_interfaces
                        .begin_create_or_update(self.get_parameter('resource_group'),
                                                peer_iface.name,
                                                peer_iface)
                )
                # wait for the update call to terminate
                message = 'Disassociate: API call done, now waiting for completion (%s)'
                self.log.info(message, peer_iface.name)
                azLogPoller.wait()
                message = 'Disassociate: API call completed (%s)'
                self.log.info(message, peer_iface.name)

            # checking the status of all the moved public IP. They must all be
            # in "succeded" state before moving forward
            for pubIP in publicIPList:
                self.log.debug('Beginning to wait for public IP %s to be in Succeeded state',
                               pubIP.name)
                while (self._NMC.public_ip_addresses.get(self.get_parameter('resource_group'),
                                                         pubIP.name)).provisioning_state != "Succeeded":
                    self.log.info('Public IP %s is not in "Succeeded" state - waiting 10s',
                                  pubIP.name)
                    time.sleep(10)
                self.log.info('Public IP %s is in "Succeeded" state', pubIP.name)

            if local_associate_required == 1:
                # some settings of the local interface have been modified
                # and the changes need to be applied

                # checking that the interface is ready before asking for a modification
                self.log.debug('Associate required. Beginning to wait for our'
                               ' interface %s to be in Succeeded state', ext_netif.name)
                while (self._NMC.network_interfaces.get(self.get_parameter('resource_group'),
                                                        self._ext_ifname)).provisioning_state != "Succeeded":
                    self.log.info('Interface %s not in "Succeeded" state - waiting 10s',
                                  ext_netif.name)
                    time.sleep(10)

                self.log.info('Associating IP with local interface %s', ext_netif.name)
                azLogPoller = (
                        self._NMC
                        .network_interfaces
                        .begin_create_or_update(self.get_parameter('resource_group'),
                                                self._ext_ifname,
                                                ext_netif)
                )
                # wait for the update call to terminate
                message = ('Associate: API call done, now waiting for completion (%s)')
                self.log.info(message, self._ext_ifname)
                azLogPoller.wait()
                message = 'Associate: API call completed (%s)'
                self.log.info(message, self._ext_ifname)

        except (ClientAuthenticationError, HttpResponseError) as aze:
            # Azure REST API call failed
            self.log.error(aze.message)
            raise ocferr.OCFErrGeneric(aze.message)
        except:
            exctype, value = sys.exc_info()[:2]
            self.log.error('uncaught error: %s - %s', exctype, value)
            self.log.error('unspecified error while updating interface')
            raise ocferr.OCFErrGeneric('unspecified error while updating interface')
        else:
            self.log.info('start operation successful')
            raise ocferr.OCFSuccess("started successfully")


    def handle_stop(self, timeout=300):
        """
        To be as conservative as possible, we don't perform any action
        for stopping the resource. Only calling start on the neighbor will
        change the status
        """
        self.log.info('STOP target has been called for rg=%s, interface=%s - nothing done',
                      self.get_parameter('resource_group'),
                      self.get_parameter('interface'))
        raise ocferr.OCFSuccess("resource agent stopped")

    def handle_monitor(self, timeout=20):
        """Check proper mapping of public IP addresses"""
        if 'OCF_RESKEY_CRM_meta_interval' in self.OCF_ENVIRON \
           and self.OCF_ENVIRON['OCF_RESKEY_CRM_meta_interval'] != '0':
            msg_details = 'interval={}, ignoring API errors'.\
                          format(self.OCF_ENVIRON['OCF_RESKEY_CRM_meta_interval'])
            ignore_errors = True
        else:
            msg_details = 'probe operation, NOT ignoring API errors'
            ignore_errors = False
        self.log.debug('monitor target has been called for rg=%s, interface=%s (%s)',
                       self.get_parameter('resource_group'),
                       self.get_parameter('interface'), msg_details)
        try:
            # Calling validate_all to initialise variables
            self.handle_validate_all()
            self.log.debug('validate_all returned successfully')

            # We are not really checking all the mapping listed in the configuration.
            # We are only checking that the mapping on the local external interface is
            # correct. It means that if the configuration includes an IP Confguration
            # which does not exist it does not trigger any error

            # Get the details about the external interface
            signal.alarm(self._api_call_timeout)
            self.log.info('Checking public IP mapping for interface %s', self._ext_ifname)
            try:
                ext_netif = self._NMC.network_interfaces.get(self.get_parameter('resource_group'),
                                                             self._ext_ifname)
            except (ClientAuthenticationError, HttpResponseError) as aze:
                # Azure REST API call failed
                self.log.error(aze.message)
                raise ocferr.OCFErrGeneric(aze.message)
            except self.ApiCallTimeoutException:
                message = 'API calls were not completed within {} seconds'.format(self._api_call_timeout)
                self.log.error(message)
                raise ocferr.OCFErrGeneric(message)

            # For each private IP address configured on the external interface
            for ip_cfg in ext_netif.ip_configurations:
                # Check if there is a specific mapping to a public IP address which need to be covered by HA
                if ip_cfg.name not in self._pub_ip_maps:
                    continue
                # Is there a public IP mapped to this private IP?
                if ip_cfg.public_ip_address is not None:
                    # if so, is it the expected one?
                    self.log.info('The public IP associated with %s is %s',
                                  ip_cfg.name, ip_cfg.public_ip_address.id)
                    if not ip_cfg.public_ip_address.id == self._pub_ip_maps[ip_cfg.name]:
                        self.log.error('The public IP associated with %s should be %s but is %s',
                                       ip_cfg.name, self._pub_ip_maps[ip_cfg.name],
                                       ip_cfg.public_ip_address.id)
                        message = ('The public IP associated with {} is not correct,'
                                   ' expected {} but got {}')
                        raise ocferr.OCFNotRunning(message.format(ip_cfg.name,
                                                                  self._pub_ip_maps[ip_cfg.name],
                                                                  ip_cfg.public_ip_address.id))
                else:
                    message = 'There is no public IP associated with {}'.format(ip_cfg.name)
                    self.log.error(message)
                    raise ocferr.OCFNotRunning(message)
            # if all checks happened smoothly raise a success
            message = 'All public IPs are correctly mapped'
            self.log.info(message)
            raise ocferr.OCFSuccess(message)
        except ocferr.OCFNotRunning:
            raise
        except ocferr.OCFSuccess:
            raise
        except ocferr.OCFErrGeneric:
            if ignore_errors:
                message = ('monitor FAILED but we are ignoring this failure'
                           ' to preserve cluster stability')
                self.log.error(message)
                raise ocferr.OCFSuccess(message)
            self.log.error('monitor (probe) FAILED - we are _NOT_ ignoring this failure')
            raise
        except:
            exctype, value = sys.exc_info()[:2]
            self.log.error('uncaught error: %s - %s', exctype, value)

            if ignore_errors:
                message = ('monitor FAILED but we are ignoring this failure'
                           ' to preserve cluster stability')
                self.log.error(message)
                raise ocferr.OCFSuccess(message)
            self.log.error('monitor (probe) FAILED - we are _NOT_ ignoring this failure')
            raise


    def handle_validate_all(self, timeout=20):
        """
        This method:
        - sets self._ext_ifname to "<myhostname>-<interface>" where <interface>
          is resource agent parameter provided in pcmk res.conf.xml
        - reads json config files which contain mappings:
            ip-eth0a1 => <hostname>-eth0a1-pub
          converts them to
            ip-eth0a1 => /subscriptions/<SUB>/resourceGroups/<RG>/providers/Microsoft.Network/publicIPAddresses/<hostname>-eth0a1-pub
          and saves them as self._pub_ip_maps
        - sets up an alarm for self._api_call_timeout seconds to guard against
          API login taking too long
        - creates an instance of NetworkManagementClient using credentials
          provided in pcmk res.conf.xml (application_id, secret, directory_id,
          subscription_id)
          By doing so it also verifies if the credentials are valid.
        - resets self._api_call_timeout to whatever's left after API login

        This method is called by both "monitor" and "start" ("stop" is a no-op),
        also under try/except.

        Note: the "timeout" parameter here isn't really used, but OCF developer guide
        says all actions (including validate-all) *should* have a timeout parameter,
        and pyocfagent blows up if there isn't enough parameters in method declaration.
        """
        try:
            self.log.debug('Initializing variables')
            # The name of the "network interface" resource in azure MUST follow the naming
            # convention : <hostname>-<interface_name>
            # example: ucef-sg401-azu-znl1-1-eth0
            # FIXME: is this the optimal way of obtaining our own hostname?
            self._ext_ifname = socket.gethostname() + '-' + self.get_parameter('interface')
            self.log.info('External interface name: %s', self._ext_ifname)

            config_file = '/opt/OSAGpcmk/resource-agents/etc/azureeip-{}.json'.format(self.get_parameter('interface'))
            with open(config_file, 'r') as azure_eip_json:
                azEipDict = json.load(azure_eip_json)
        except:
            exctype, value = sys.exc_info()[:2]
            message = ('Error - the required configuration parameters cannot be read:'
                       ' {} - {}'.format(exctype, value))
            self.log.error(message)
            raise ocferr.OCFErrInstalled(message)

        signal.alarm(self._api_call_timeout)
        # Do required API calls. If we are not successful within _api_call_timeout seconds,
        # an error is thrown.
        try:
            # Setup Azure credentials
            if self.get_parameter('managed_identity_id') != "":
                self.log.debug('Getting access credentials based on the managed identity')
                identity_config = {"mi_res_id": self.get_parameter('managed_identity_id')}
                az_credential = ManagedIdentityCredential(identity_config=identity_config)
            else:
                self.log.debug('Getting access credentials based on service principal')
                az_credential = ClientSecretCredential(tenant_id=self.get_parameter('directory_id'),
                                                       client_id=self.get_parameter('application_id'),
                                                       client_secret=self.get_parameter('secret'),)

            # Create an instance of NetworkManagementClient
            self.log.debug('Initializing NetworkManagementClient')

                        # If the resource is busy when the API call is performed the call
            # fails with a status code 409. By default, the SDK implementation
            # will not perform a retry and will simply throw an exception.
            # In order to force the SDK to retry we have to define a custom
            # retry_policy. For details, see:
            # https://github.com/Azure/azure-sdk-for-python/blob/7c4cfe236d113c59e66515b6315def256219aa6b/sdk/core/azure-core/azure/core/pipeline/policies/_retry.py
            # We also take this opportunity to fine tune some value to better
            # with our specific use-case.
            retry_policy = RetryPolicy(retry_on_status_codes=set([409]),
                                       retry_read=10,
                                       retry_status=10,
                                       retry_backoff_factor=2,
                                       retry_backoff_max=20)
            self._NMC = NetworkManagementClient(credential=az_credential,
                                                subscription_id=self.get_parameter('subscription_id'),
                                                retry_policy=retry_policy,)

            # Performing a dummy call to validate credentials
            # Without this step the credentials are only registered but never actually validated
            # which contradicts the goal of the "validate_all" function
            self._NMC.network_interfaces.get(self.get_parameter('resource_group'),
                                             self._ext_ifname)

            self._pub_ip_maps = {}
            for ipConfig in azEipDict:
                path = ('/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network'
                        '/publicIPAddresses/{}'.format(self.get_parameter('subscription_id'),
                                                       self.get_parameter('resource_group'),
                                                       azEipDict[ipConfig]))
                self._pub_ip_maps[ipConfig] = path
                self.log.info('The expected public IP for %s is %s',
                              ipConfig, self._pub_ip_maps[ipConfig])

        except self.ApiCallTimeoutException:
            message = 'API calls did not complet within {} seconds'.format(self._api_call_timeout)
            self.log.error(message)
            raise ocferr.OCFErrGeneric(message)
        except CredentialUnavailableError as ce:
            # managed identity isn't available
            message = "The credential did not attempt to authenticate because required data or state is unavailable"
            self.log.error(message)
            raise ocferr.OCFErrGeneric(message)
        except (ClientAuthenticationError, HttpResponseError) as aze:
            # Azure REST API call failed
            self.log.error(aze.message)
            raise ocferr.OCFErrGeneric(aze.message)
        except:
            exctype, value = sys.exc_info()[:2]
            self.log.error('uncaught error: %s - %s', exctype, value)
        finally:
            # storing the amount of remaining time to be use
            # for the rest of the monitor operation
            self._api_call_timeout = signal.alarm(0)


if __name__ == "__main__":
    ocf = AzureEip(testmode=False, debug_logging_enabled=True)
    try:
        ocf.cmdline_call()
    except Exception as ex:
        for line in traceback.format_exc(sys.exc_info()[2]).splitlines():
            print('ERROR:', line)
        raise ocferr.OCFErrGeneric(str(ex))